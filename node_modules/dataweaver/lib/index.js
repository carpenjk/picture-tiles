"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dw = exports.getSubComponentProps = exports.getSubComponentData = exports.getComponentData = exports.getNonStaticPosProps = exports.condition = exports.mapFlatProp = exports.flattenProps = exports.unflattenProps = exports.inverseProps = exports.getConditionalProp = exports.getProp = exports.parseSizeUnits = void 0;

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _getVal = function _getVal(v, props, br) {
  var values = typeof v == 'function' ? v(props, br) : v;
  if (Array.isArray(values)) return values[br];
  return values;
};

var parseSizeUnits = function parseSizeUnits(valUnits) {
  function parseSizeUnit(valUnit) {
    var exp = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/;
    var matches = [];
    matches = valUnit.match(exp);

    if (matches) {
      return {
        whole: matches[0],
        value: matches[1],
        unit: matches[2]
      };
    }

    return {
      whole: valUnit
    };
  }

  if (!Array.isArray(valUnits)) {
    return parseSizeUnit(valUnits);
  }

  return valUnits.map(function (val) {
    return parseSizeUnit(val);
  });
};

exports.parseSizeUnits = parseSizeUnits;

var getProp = function getProp(prop) {
  return function (props, br) {
    //props automatically passed as first prop in breakpoint function
    var propValues = props[prop];

    if (!Array.isArray(propValues)) {
      return propValues;
    }

    var value = '';

    if (!br) {
      value = propValues[0];
    } else if (br < propValues.length) {
      value = propValues[br];
    } else {
      value = propValues[propValues.length - 1];
    }

    return value;
  };
};

exports.getProp = getProp;

var getConditionalProp = function getConditionalProp(prop, fn) {
  return function (props, br) {
    var propValue = getProp(prop)(props, br);
    return fn(_defineProperty({
      props: props
    }, prop, propValue));
  };
};

exports.getConditionalProp = getConditionalProp;

var inverseProps = function inverseProps(prop) {
  if (!Array.isArray(prop)) {
    return !prop;
  } else {
    return prop.map(function (item) {
      return !item;
    });
  }
}; // unflattenProps:
// transforms array of props into an object of prop arrays
// ex.
// from:
// [
//   {
//    top: '100px',
//    left: '50%',
//    transform: 'translateX(-50%)',
//  },
//  {
//    top: '50%',
//    transform: 'translateY(-50%)'
//  }
// ]
// to:
// {
//   top: ['100px', '50%'],
//   left: ['50%', ''],
//   transform:  ['translateX(-50%)', 'translateY(-50%)']
// }
//
// if defaults provided, then empty slots in the array will be infused with default value.
// this is helplful because getProps gets the nearest smaller breakpoint value. Using a default
// reinfuses the default value instead.
//@params defaults ex. 1 {left: ['8px', '0']}  || ex. 2 {left: '8px'}


exports.inverseProps = inverseProps;

var unflattenProps = function unflattenProps(props, defaultValues, options) {
  var _ref = options || {},
      _ref$noValue = _ref.noValue,
      noValue = _ref$noValue === void 0 ? '' : _ref$noValue;

  if (!Array.isArray(props)) {
    return props;
  }

  function createSuperSet(propAry) {
    var superSetObj = {}; // iterate through each key pair property object

    propAry.forEach(function (obj) {
      // iterate through key pairs of current prop object
      Object.keys(obj).forEach(function (p) {
        // add key to superSetObject
        superSetObj[p] = [];
      });
    });
    return superSetObj;
  }

  var unFlattened = createSuperSet(props);
  var resultLength = props.length;

  var _loop = function _loop(i) {
    Object.keys(unFlattened).forEach(function (key) {
      // if key exists in current propArry obj, push value, else push default
      var curValue = props[i][key];

      if (curValue !== undefined) {
        unFlattened[key].push(curValue);
      } else {
        var defaultValue = defaultValues[key] !== undefined ? getProp(key)(defaultValues, i) : undefined;

        if (defaultValue !== undefined) {
          unFlattened[key].push(defaultValue);
        }
      }
    });
  };

  for (var i = 0; i < resultLength; i += 1) {
    _loop(i);
  }

  return unFlattened;
}; // flattenProps:
// transforms an object of prop arrays into an array of props
// this is useful in combination with mapFlatProp to apply logic to each set of 
// values corresponding to a breakpoint
// the last value in each prop array will be carried forward to mirror getProps by default
// @param defaultValues: [{ prop: a || [a, b, c...] }, ...] 
// default values will be used to fill in gaps for any provided values overwriting carryforward value
// Options:
// @option useNoValue: true || false (default)
// useNoValue overwrites carryforward in the event of no default value
//@option noValue: any value || undefined (default)


exports.unflattenProps = unflattenProps;

var flattenProps = function flattenProps(props, defaultValues, options) {
  var _ref2 = options || {},
      noValue = _ref2.noValue,
      _ref2$useNoValue = _ref2.useNoValue,
      useNoValue = _ref2$useNoValue === void 0 ? false : _ref2$useNoValue; //first iteration return value


  function getCurrValue(k, i) {
    //return static values on first iteration
    var values = props[k];

    if (!Array.isArray(values)) {
      if (i !== 0) {
        return;
      } else {
        return _defineProperty({}, k, values[i]);
      }
    }

    var pAryLength = values.length;

    if (i >= pAryLength) {
      //no value at this iteration
      return;
    } // return curr value


    return _defineProperty({}, k, values[i]);
  }

  var flattenedProps = [];
  var keys = Object.keys(props);
  var resultLength = Math.max.apply(Math, _toConsumableArray(keys.map(function (k) {
    var values = props[k];
    return Array.isArray(values) ? values.length : 1;
  })));

  var _loop2 = function _loop2(i) {
    var propObj = keys.reduce(function (obj, p) {
      //use current value if exist in prop set
      var currVal = getCurrValue(p, i);

      if (currVal !== undefined) {
        return _objectSpread(_objectSpread({}, obj), getCurrValue(p, i));
      } else if (defaultValues[p] !== undefined) {
        //
        return _objectSpread(_objectSpread({}, obj), getProp(p)(defaultValues, i));
      } else if (useNoValue) {
        return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, p, noValue));
      } else {
        //get carry forward value
        return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, p, getProp(p)(props, i)));
      }
    }, {});
    flattenedProps.push(propObj);
  };

  for (var i = 0; i < resultLength; i += 1) {
    _loop2(i);
  }

  return flattenedProps;
}; // applies a function to each set of prop values in a flattened prop array


exports.flattenProps = flattenProps;

var mapFlatProp = function mapFlatProp(fn, propAry) {
  if (!Array.isArray(propAry)) {
    return fn(propAry);
  }

  return propAry.map(function (p) {
    return fn(p);
  });
}; //@param cnd(option1): callback function returns boolean and accepts params props, br (optional)
//@param cnd(option2): string value of property name


exports.mapFlatProp = mapFlatProp;

var condition = function condition(cnd) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return function (props, br) {
      var cndBln = '';

      if (typeof cnd == 'function') {
        //call function
        cndBln = cnd(props, br);
      } else if (typeof cnd == 'string') {
        cndBln = getProp(cnd)(props, br) ? true : false;
      } else {
        cndBln = cnd;
      }

      if (!cndBln) return '';
      var cndStyles = '';
      args[0].forEach(function (str, i) {
        if (i < args.length - 1) {
          cndStyles = "".concat(cndStyles).concat(str).concat(_getVal(args[i + 1], props, br)); // get variable value or call function
        } else {
          cndStyles = cndStyles + str;
        }
      });
      return cndStyles;
    };
  };
};

exports.condition = condition;

var getNonStaticPosProps = function getNonStaticPosProps(posObj) {
  if (!posObj) {
    // use default positioning
    return undefined;
  }

  var _ref5 = posObj || {},
      vertical = _ref5.vertical,
      horizontal = _ref5.horizontal,
      pos = _objectWithoutProperties(_ref5, ["vertical", "horizontal"]);

  function getCenterProps() {
    if (vertical && horizontal) {
      return {
        left: '50%',
        top: '50%',
        transform: 'translate(-50%, -50%)'
      };
    }

    if (vertical) {
      return {
        top: '50%',
        transform: 'translateY(-50%)'
      };
    }

    if (horizontal) {
      return {
        left: '50%',
        transform: 'translateX(-50%)'
      };
    }
  }

  if (vertical && horizontal) {
    // positions don't apply
    return getCenterProps();
  }

  var positions = Object.keys(pos).reduce(function (obj, k) {
    return typeof pos[k] !== 'function' ? _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, k, pos[k])) : obj;
  }, {});
  return _objectSpread(_objectSpread({}, positions), getCenterProps());
};

exports.getNonStaticPosProps = getNonStaticPosProps;

var getComponentData = function getComponentData(semKey, data) {
  var compData = data[semKey]; //set optional properties to '' for destructuring;

  compData.Layout = compData.Layout ? compData.Layout : '';
  return _defineProperty({}, semKey, compData);
};

exports.getComponentData = getComponentData;

var getSubComponentData = function getSubComponentData(semKey, data, i) {
  var compData = getComponentData(semKey, data);
  if (!compData[semKey].items) return undefined;
  var subCompData = compData[semKey].items[i];
  return _defineProperty({}, semKey, subCompData);
};

exports.getSubComponentData = getSubComponentData;

var getSubComponentProps = function getSubComponentProps(semKey, data) {
  return {
    semKey: semKey,
    data: getComponentData(semKey, data)
  };
};

exports.getSubComponentProps = getSubComponentProps;

var dw_prop = function dw_prop(prop, theme) {
  return getProp(prop);
};

var dw = {
  prop: getProp()
};
exports.dw = dw;