"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleClass = toggleClass;
exports.useBreakpoints = exports.tw = exports.getZIndex = exports.getTransform = exports.getTextShadow = exports.getBoxShadow = exports.getBorderStyle = exports.getBorderRadius = exports.getBorderWidth = exports.getBorderLeft = exports.getBorderBottom = exports.getBorderRight = exports.getBorderTop = exports.getBorder = exports.getMaxHeight = exports.getMaxWidth = exports.getMinHeight = exports.getMinWidth = exports.getHeight = exports.getWidth = exports.getPaddingLeft = exports.getPaddingBottom = exports.getPaddingRight = exports.getPaddingTop = exports.getPadding = exports.getMarginLeft = exports.getMarginBottom = exports.getMarginRight = exports.getMarginTop = exports.getMargin = exports.getFontWeight = exports.getFontSize = exports.getFontFamily = exports.getLetterSpacing = exports.getLineHeight = exports.getBorderColor = exports.getBackgroundColor = exports.getColor = exports.defineSpace = exports.twTransition = exports.toggleTransitions = exports.getTransitions = exports.breakpoint = exports.withThemeweaver = exports.createClassCSS = exports.value = exports.variant = void 0;

var _UseBreakpoints = _interopRequireDefault(require("./UseBreakpoints"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// import useBrEffect from './UseBrEffect';
// import useBrLayoutEffect from './UseBrLayoutEffect';
var _DEFAULT_VARIANT = 'default';
var sysUILookup = {
  color: ['colors', 'color'],
  backgroundColor: ['colors', 'bg'],
  borderColor: ['colors', 'borderColor'],
  lineHeight: 'lineHeights',
  letterSpacing: 'letterSpacings',
  fontFamily: 'fonts',
  fontSize: 'fontSizes',
  fontWeight: 'fontWeights',
  margin: ['space', 'margin'],
  marginTop: ['space', 'marginTop'],
  marginRight: ['space', 'marginRight'],
  marginBottom: ['space', 'marginBottom'],
  marginLeft: ['space', 'marginLeft'],
  padding: ['space', 'padding'],
  paddingTop: ['space', 'paddingTop'],
  paddingRight: ['space', 'paddingRight'],
  paddingBottom: ['space', 'paddingBottom'],
  paddingLeft: ['space', 'paddingLeft'],
  width: ['sizes', 'width'],
  height: ['sizes', 'height'],
  minWidth: ['sizes', 'minWidth'],
  minHeight: ['sizes', 'minHeight'],
  maxWidth: ['sizes', 'maxWidth'],
  maxHeight: ['sizes', 'maxHeight'],
  border: ['borders', 'border'],
  borderTop: ['borders', 'borderTop'],
  borderRight: ['borders', 'borderRight'],
  borderBottom: ['borders', 'borderBottom'],
  borderLeft: ['borders', 'borderLeft'],
  borderWidth: 'borderWidths',
  borderStyle: 'borderStyles',
  borderRadius: 'radii',
  boxShadow: ['shadows', 'boxShadow'],
  textShadow: ['shadows', 'textShadow'],
  zIndex: 'zIndices',
  transition: 'transitions',
  transform: 'transform'
};

function _createEmptyLevel(ref, p) {
  if (!ref[p]) ref[p] = {}; // create system key or style/qualifiers

  return ref[p]; //set rolling reference point in object
}

var _drill = function _drill(ref, keys) {
  var refCopy = Array.isArray(ref) ? _toConsumableArray(ref) : _objectSpread({}, ref);
  if (!keys.forEach) return refCopy[keys]; //single level

  keys.forEach(function (key) {
    return refCopy = refCopy[key];
  });
  return refCopy;
};

function _bracketDrill(ref, themeKey) {
  var splitKey = themeKey.replace ? themeKey.replace(']', '').split('[') : themeKey;
  return _drill(ref, splitKey);
}

function _createAliasValues(values, theme, themeKey, ref, node) {
  if (Array.isArray(values)) {
    ref[node] = _lookupThemeAry(values, theme, themeKey);
  } else if (_typeof(values) === 'object') {
    ref[node] = _createEmptyLevel(ref, node);
    Object.keys(values).forEach(function (key) {
      if (Array.isArray(values[key])) {
        ref[node][key] = _lookupThemeAry(values[key], theme, themeKey);
      } else {
        if (key === 'value') {
          ref[node] = values[key];
        } else {
          ref[node][key] = theme[themeKey][values[key]];
        }
      }
    });
  } else {
    if (_isKeyValue(theme[themeKey][values])) {
      ref[node] = theme[themeKey][values];
    } else {
      ref[node] = _bracketDrill(theme[themeKey], values);
    }
  }
}

var _getTheme = function _getTheme(path, style, theme) {
  var pSplit = path.split('.');
  var themeUI = sysUILookup[style].split ? [sysUILookup[style]] : _toConsumableArray(sysUILookup[style]);

  var _themeUI = _toArray(themeUI),
      themeKey = _themeUI[0],
      qualifiers = _themeUI.slice(1);

  var group = pSplit[0];
  var variant = pSplit.length > 1 ? pSplit[1] : _DEFAULT_VARIANT;
  if (!theme[themeKey]) return ''; //theme key hasn't been defined, no need to continue

  var varNode = theme[themeKey][group] ? theme[themeKey][group][variant] : undefined;
  var leafNode = _typeof(varNode) === 'object' ? _drill(varNode, qualifiers) : undefined;

  if (leafNode || leafNode === 0) {
    return leafNode;
  } else if (_isStyleNode(varNode)) {
    return varNode;
  } else {
    return '';
  }
};

var _createPath = function _createPath(path, tw) {
  if (_typeof(path) !== 'object') {
    return path;
  }

  var qAry = [tw.semKey, tw.variant];
  var suffix = path.suffix; //filter falsy to prevent double dot scenario

  return qAry.filter(Boolean).join('.').concat(suffix || '');
};

function _isStyleNode(node) {
  return Array.isArray(node) || _typeof(node) !== 'object';
}

function _getUnitValue(derivedValue) {
  return typeof derivedValue !== 'number' ? derivedValue : "".concat(derivedValue, "px");
}

var _getVal = function _getVal(v, props, br) {
  var values = typeof v == 'function' ? v(props, br) : v;
  if (Array.isArray(values)) return values[br];
  return values;
};

function _isKeyValue(value) {
  return value || value === 0;
}

function _lookupThemeAry(values, theme, themeKey) {
  return values.reduce(function (result, styleKey) {
    if (_typeof(styleKey) === 'object') {
      if (styleKey.value) {
        //array of explicit style values
        return [].concat(_toConsumableArray(result), [styleKey.value]);
      } else {//error
      }
    } else if (_isKeyValue(theme[themeKey][styleKey])) {
      //lookup value from theme
      return [].concat(_toConsumableArray(result), [theme[themeKey][styleKey]]);
    } else {
      var ref = theme[themeKey];
      return [].concat(_toConsumableArray(result), [_bracketDrill(ref, styleKey)]); //compound lookup value from theme
    }
  }, []);
}

function _createClassStyle(className, styles, props, br) {
  var keys = Object.keys(styles);
  var stylesCSS = '\n';
  keys.forEach(function (style) {
    stylesCSS = stylesCSS + "    ".concat(style, ": ").concat(_getVal(styles[style], props, br), ";\n");
  });
  var css = "&.".concat(className, " {").concat(stylesCSS, "}");
  return css;
}

var _getBreakpointValue = function _getBreakpointValue(breakpoints, br, values) {
  if (Array.isArray(values)) {
    return _getDefinedBreakpointValue(breakpoints, br, values);
  } else {
    return values;
  }
};

var _getDefinedBreakpointValue = function _getDefinedBreakpointValue(breakpoints, br, values) {
  if (br) {
    return values[br];
  } else {
    return _getUndefinedBreakpoint(breakpoints, values);
  }
};

var _getUndefinedBreakpoint = function _getUndefinedBreakpoint(breakpoints, values) {
  return values[0]; //! add logic at a later date
};

var variant = function variant(name, styles) {
  return _defineProperty({}, name, {
    variant: true,
    styles: _objectSpread({}, styles)
  });
};

exports.variant = variant;

var value = function value(val) {
  return {
    value: val
  };
};

exports.value = value;

function toggleClass(isOn, className) {
  if (isOn) return className;
}

var createClassCSS = function createClassCSS(className, styles) {
  return function (props) {
    return _createClassStyle(className, styles, props);
  };
}; //FUNCTION: withThemeweaver
// Creates and returns a theme object of a specific shape for consuming
// Clones specified theme object and appends with alias strucure which
// manages styles and variantes
// @param: theme = a theme object following system-ui spec
// @param: config = style object with following shape

/* {
  nav: variant('main', {
    color: 'action',  //action is a color specified in system-ui theme object
    backgroundColor: 'secondary',
    fontFamily: 'poppins',
    fontSize: 3,
    fontWeight: 'bold',
    padding: 4,
  })     */
// nesting variant objects is optional if only one variant present and object
//can be appended with as many groups (i.e. nav) and variants as needed


exports.createClassCSS = createClassCSS;

var withThemeweaver = function withThemeweaver(theme, config) {
  var configWithVariant = _objectSpread({}, config);

  var ref = theme; //moving reference for adding alias nodes starts at the top node

  var usesVariants = false;
  var groupKeys = {};
  Object.keys(config).forEach(function (group) {
    groupKeys = Object.keys(config[group]);
    usesVariants = config[group][groupKeys[0]].variant;

    if (!usesVariants) {
      //! ****************************
      //if no variants are being used reshape config object with variant placeholder
      configWithVariant[group] = variant(_DEFAULT_VARIANT, configWithVariant[group]);
    }

    Object.keys(configWithVariant[group]).forEach(function (variant) {
      Object.keys(configWithVariant[group][variant].styles).forEach(function (style) {
        var themeKeys = sysUILookup[style];
        var values = configWithVariant[group][variant].styles[style];
        themeKeys = _typeof(themeKeys) === 'object' ? themeKeys : [themeKeys]; //1st: system key i.e colors, 2nd: category i.e. nav, 3-nth: style i.e. color, last: value

        themeKeys.forEach(function (key, i, keys) {
          var isLast = i === keys.length - 1;
          if (i === 0 || !isLast) ref = _createEmptyLevel(ref, key);

          if (i === 0) {
            //create group and variant after setting system ui key
            ref = _createEmptyLevel(ref, group);

            if (!isLast) {
              ref = _createEmptyLevel(ref, variant);
            } else {
              _createAliasValues(values, theme, themeKeys[0], ref, variant);
            }
          } else if (isLast) {
            _createAliasValues(values, theme, themeKeys[0], ref, key);
          }
        });
        ref = theme; //return to top
      });
    });
  });
  return theme;
};

exports.withThemeweaver = withThemeweaver;

var breakpoint = function breakpoint(br) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return function (props) {
      var media = "@media(min-Width: ".concat(_getUnitValue(props.theme.breakpoints[br]), "){");
      args[0].forEach(function (str, i) {
        if (i < args.length - 1) {
          media = "".concat(media).concat(str).concat(_getVal(args[i + 1], props, br)); // get variable value or call function
        } else {
          media = media + str;
        }
      });
      media = media + '\n}';
      return media;
    };
  };
};

exports.breakpoint = breakpoint;

var getTransitions = function getTransitions(transitions) {
  return function (props, br) {
    var css = '';
    var transAry = Array.isArray(transitions) ? transitions : [transitions];
    transAry.forEach(function (trans, i) {
      var transitions = _getTheme(trans.path, 'transition', props.theme);

      var transition = '';
      var derivedValue = '';

      if (_typeof(transitions) === 'object' && !Array.isArray(transitions)) {
        //regular lookup
        transition = transitions[trans.style];
        derivedValue = _getBreakpointValue(props.theme.breakpoints, br, transitions[trans.style]);
      } else {
        //explicit value responsive
        transition = transitions;
      }

      derivedValue = !transition ? trans.fallback : _getBreakpointValue(props.theme.breakpoints, br, transition);
      css = css + derivedValue;
      if (i < transAry.length - 1) css = css + ', ';
    });
    return css;
  };
};

exports.getTransitions = getTransitions;

var toggleTransitions = function toggleTransitions(trans, className) {
  return function (props, br) {
    var transAry = Array.isArray(trans) ? trans : [trans];
    var styles = {};
    var transValues = [];
    transAry.forEach(function (trans) {
      styles = _objectSpread(_objectSpread({}, styles), {}, _defineProperty({}, trans.style, _getVal(trans.value, props, br)));
      transValues = [].concat(_toConsumableArray(transValues), [{
        style: trans.style,
        path: trans.transition,
        fallback: trans.fallback
      }]);
    }, {});
    return createClassCSS(className || 'tw-transitions', _objectSpread(_objectSpread({}, styles), {}, {
      transition: getTransitions(transValues)(props, br)
    }))(props, br);
  };
};

exports.toggleTransitions = toggleTransitions;

var twTransition = function twTransition(isTrans) {
  return isTrans ? 'tw-transition' : '';
};

exports.twTransition = twTransition;

var defineSpace = function defineSpace(config) {
  return function (props, br) {
    var inside = config.inside,
        outside = config.outside,
        maxInside = config.maxInside,
        maxOutside = config.maxOutside,
        maxTotal = config.maxTotal,
        flexInside = config.flexInside,
        flexOutside = config.flexOutside,
        border = config.border,
        boxShadow = config.boxShadow;
  };
};

exports.defineSpace = defineSpace;

var getColor = function getColor(path, fallbackValue) {
  return function (props, br) {
    var _ref2 = props || false,
        tw = _ref2.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'color', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getColor = getColor;

var getBackgroundColor = function getBackgroundColor(path, fallbackValue) {
  return function (props, br) {
    var _ref3 = props || false,
        tw = _ref3.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'backgroundColor', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getBackgroundColor = getBackgroundColor;

var getBorderColor = function getBorderColor(path, fallbackValue) {
  return function (props, br) {
    var _ref4 = props || false,
        tw = _ref4.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderColor', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getBorderColor = getBorderColor;

var getLineHeight = function getLineHeight(path, fallbackValue) {
  return function (props, br) {
    var _ref5 = props || false,
        tw = _ref5.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'lineHeight', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getLineHeight = getLineHeight;

var getLetterSpacing = function getLetterSpacing(path, fallbackValue) {
  return function (props, br) {
    var _ref6 = props || false,
        tw = _ref6.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'letterSpacing', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getLetterSpacing = getLetterSpacing;

var getFontFamily = function getFontFamily(path, fallbackValue) {
  return function (props, br) {
    var _ref7 = props || false,
        tw = _ref7.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'fontFamily', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getFontFamily = getFontFamily;

var getFontSize = function getFontSize(path, fallbackValue) {
  return function (props, br) {
    var _ref8 = props || false,
        tw = _ref8.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'fontSize', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getFontSize = getFontSize;

var getFontWeight = function getFontWeight(path, fallbackValue) {
  return function (props, br) {
    var _ref9 = props || false,
        tw = _ref9.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'fontWeight', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getFontWeight = getFontWeight;

var getMargin = function getMargin(path, fallbackValue) {
  return function (props, br) {
    var _ref10 = props || false,
        tw = _ref10.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'margin', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMargin = getMargin;

var getMarginTop = function getMarginTop(path, fallbackValue) {
  return function (props, br) {
    var _ref11 = props || false,
        tw = _ref11.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'marginTop', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMarginTop = getMarginTop;

var getMarginRight = function getMarginRight(path, fallbackValue) {
  return function (props, br) {
    var _ref12 = props || false,
        tw = _ref12.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'marginRight', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMarginRight = getMarginRight;

var getMarginBottom = function getMarginBottom(path, fallbackValue) {
  return function (props, br) {
    var _ref13 = props || false,
        tw = _ref13.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'marginBottom', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMarginBottom = getMarginBottom;

var getMarginLeft = function getMarginLeft(path, fallbackValue) {
  return function (props, br) {
    var _ref14 = props || false,
        tw = _ref14.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'marginLeft', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMarginLeft = getMarginLeft;

var getPadding = function getPadding(path, fallbackValue) {
  return function (props, br) {
    var _ref15 = props || false,
        tw = _ref15.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'padding', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getPadding = getPadding;

var getPaddingTop = function getPaddingTop(path, fallbackValue) {
  return function (props, br) {
    var _ref16 = props || false,
        tw = _ref16.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'paddingTop', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getPaddingTop = getPaddingTop;

var getPaddingRight = function getPaddingRight(path, fallbackValue) {
  return function (props, br) {
    var _ref17 = props || false,
        tw = _ref17.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'paddingRight', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getPaddingRight = getPaddingRight;

var getPaddingBottom = function getPaddingBottom(path, fallbackValue) {
  return function (props, br) {
    var _ref18 = props || false,
        tw = _ref18.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'paddingBottom', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getPaddingBottom = getPaddingBottom;

var getPaddingLeft = function getPaddingLeft(path, fallbackValue) {
  return function (props, br) {
    var _ref19 = props || false,
        tw = _ref19.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'paddingLeft', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getPaddingLeft = getPaddingLeft;

var getWidth = function getWidth(path, fallbackValue) {
  return function (props, br) {
    var _ref20 = props || false,
        tw = _ref20.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'width', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getWidth = getWidth;

var getHeight = function getHeight(path, fallbackValue) {
  return function (props, br) {
    var _ref21 = props || false,
        tw = _ref21.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'height', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getHeight = getHeight;

var getMinWidth = function getMinWidth(path, fallbackValue) {
  return function (props, br) {
    var _ref22 = props || false,
        tw = _ref22.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'minWidth', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMinWidth = getMinWidth;

var getMinHeight = function getMinHeight(path, fallbackValue) {
  return function (props, br) {
    var _ref23 = props || false,
        tw = _ref23.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'minHeight', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMinHeight = getMinHeight;

var getMaxWidth = function getMaxWidth(path, fallbackValue) {
  return function (props, br) {
    var _ref24 = props || false,
        tw = _ref24.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'maxWidth', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMaxWidth = getMaxWidth;

var getMaxHeight = function getMaxHeight(path, fallbackValue) {
  return function (props, br) {
    var _ref25 = props || false,
        tw = _ref25.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'maxHeight', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getMaxHeight = getMaxHeight;

var getBorder = function getBorder(path, fallbackValue) {
  return function (props, br) {
    var _ref26 = props || false,
        tw = _ref26.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'border', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getBorder = getBorder;

var getBorderTop = function getBorderTop(path, fallbackValue) {
  return function (props, br) {
    var _ref27 = props || false,
        tw = _ref27.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderTop', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getBorderTop = getBorderTop;

var getBorderRight = function getBorderRight(path, fallbackValue) {
  return function (props, br) {
    var _ref28 = props || false,
        tw = _ref28.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderRight', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getBorderRight = getBorderRight;

var getBorderBottom = function getBorderBottom(path, fallbackValue) {
  return function (props, br) {
    var _ref29 = props || false,
        tw = _ref29.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderBottom', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getBorderBottom = getBorderBottom;

var getBorderLeft = function getBorderLeft(path, fallbackValue) {
  return function (props, br) {
    var _ref30 = props || false,
        tw = _ref30.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderLeft', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getBorderLeft = getBorderLeft;

var getBorderWidth = function getBorderWidth(path, fallbackValue) {
  return function (props, br) {
    var _ref31 = props || false,
        tw = _ref31.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderWidth', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getBorderWidth = getBorderWidth;

var getBorderRadius = function getBorderRadius(path, fallbackValue) {
  return function (props, br) {
    var _ref32 = props || false,
        tw = _ref32.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderRadius', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;

    var derivedValue = _getBreakpointValue(props.theme.breakpoints, br, themeValues);

    return _getUnitValue(derivedValue);
  };
};

exports.getBorderRadius = getBorderRadius;

var getBorderStyle = function getBorderStyle(path, fallbackValue) {
  return function (props, br) {
    var _ref33 = props || false,
        tw = _ref33.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'borderStyle', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getBorderStyle = getBorderStyle;

var getBoxShadow = function getBoxShadow(path, fallbackValue) {
  return function (props, br) {
    var _ref34 = props || false,
        tw = _ref34.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'boxShadow', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getBoxShadow = getBoxShadow;

var getTextShadow = function getTextShadow(path, fallbackValue) {
  return function (props, br) {
    var _ref35 = props || false,
        tw = _ref35.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'textShadow', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getTextShadow = getTextShadow;

var getTransform = function getTransform(path, fallbackValue) {
  return function (props, br) {
    var _ref36 = props || false,
        tw = _ref36.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'transform', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getTransform = getTransform;

var getZIndex = function getZIndex(path, fallbackValue) {
  return function (props, br) {
    var _ref37 = props || false,
        tw = _ref37.tw;

    var derivedPath = _createPath(path, tw);

    var themeValues = _getTheme(derivedPath, 'zIndex', props.theme);

    if (!_isKeyValue(themeValues)) return fallbackValue;
    return _getBreakpointValue(props.theme.breakpoints, br, themeValues);
  };
};

exports.getZIndex = getZIndex;
var tw = {
  color: getColor,
  backgroundColor: getBackgroundColor,
  lineHeight: getLineHeight,
  letterSpacing: getLetterSpacing,
  fontFamily: getFontFamily,
  fontSize: getFontSize,
  fontWeight: getFontWeight,
  margin: getMargin,
  marginTop: getMarginTop,
  marginRight: getMarginRight,
  marginBottom: getMarginBottom,
  marginLeft: getMarginLeft,
  padding: getPadding,
  paddingTop: getPaddingTop,
  paddingRight: getPaddingRight,
  paddingBottom: getPaddingBottom,
  paddingLeft: getPaddingLeft,
  width: getWidth,
  height: getHeight,
  minWidth: getMinWidth,
  minHeight: getMinHeight,
  maxWidth: getMaxWidth,
  maxHeight: getMaxHeight,
  border: getBorder,
  borderTop: getBorderTop,
  borderRight: getBorderRight,
  borderBottom: getBorderBottom,
  borderLeft: getBorderLeft,
  borderColor: getBorderColor,
  borderWidth: getBorderWidth,
  borderStyle: getBorderStyle,
  borderRadius: getBorderRadius,
  boxShadow: getBoxShadow,
  textShadow: getTextShadow,
  zIndex: getZIndex,
  transitions: getTransitions,
  breakpoint: breakpoint,
  toggleTransitions: toggleTransitions,
  toggleClass: toggleClass,
  createClassCSS: createClassCSS
};
exports.tw = tw;
var useBreakpoints = _UseBreakpoints["default"]; // export const ww = {
//   useBreakpoint: useBreakpoint,
//   useBrEffect: useBrEffect,
//   useBrLayoutEffect: useBrLayoutEffect
// }

exports.useBreakpoints = useBreakpoints;